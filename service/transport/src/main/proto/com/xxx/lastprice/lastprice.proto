syntax = "proto3";

import "google/protobuf/empty.proto";

option java_package = "com.xxx.lastprice.transport";
option java_outer_classname = "OuterLastPrice";
option java_multiple_files = true;


message InstrumentPriceRecord {
    string instrument = 1;
    int64 asOf = 2;
    bytes payload = 3;
}

message LastPriceRequest {
    string instrument = 1;
}

message LastPriceResponse {
    enum Status {
        SUCCESS = 0;
        WRONG_INSTRUMENT = 1;
        PRICE_NOT_AVAILABLE = 2;
    }
    Status status = 1;
    InstrumentPriceRecord priceRecord = 2;
}

message StartBatchRunResponse {
    enum Status {
        SUCCESS = 0;
        TOO_MANY_ACTIVE_BATCH_RUNS = 2;
    }
    Status status = 1;
    int64 batchRunId = 2;
}

message UploadChunkRequest {
    int64 batchRunId = 1;
    repeated InstrumentPriceRecord priceRecords = 2;
}

message UploadChunkResponse {
    enum Status {
        SUCCESS = 0;
        BATCH_RUN_NOT_FOUND = 1;
        WRONG_INSTRUMENT = 2;
    }
    Status status = 1;
}

message CancelBatchRunRequest {
    int64 batchRunId = 1;
}

message CancelBatchRunResponse {
    enum Status {
        SUCCESS = 0;
        BATCH_RUN_NOT_FOUND = 1;
    }
    Status status = 1;
}

message CompleteBatchRunRequest {
    int64 batchRunId = 1;
}

message CompleteBatchRunResponse {
    enum Status {
        SUCCESS = 0;
        BATCH_RUN_NOT_FOUND = 1;
    }
    Status status = 1;
}

service LastPrice {

    // Requests last price for the given instrument.
    rpc requestLastPrice(LastPriceRequest) returns (LastPriceResponse) {}

    // Send command to start a batch run.
    rpc startBatchRun(google.protobuf.Empty) returns (StartBatchRunResponse) {}

    // Uploads given price records chunk to the service.
    rpc uploadChunk(UploadChunkRequest) returns (UploadChunkResponse) {}

    // Cancels butch with the given id.
    rpc cancelBatchRun(CancelBatchRunRequest) returns (CancelBatchRunResponse) {}

    // Completes batch run with the given id.
    rpc completeBatchRun(CompleteBatchRunRequest) returns (CompleteBatchRunResponse) {}
}
